{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "eslint:monorepo",
          "receiveArgs": true
        },
        {
          "exec": "pnpm exec nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "spawn": "post-build"
        }
      ]
    },
    "build:skip-cache": {
      "name": "build:skip-cache",
      "steps": [
        {
          "spawn": "build",
          "args": [
            "--skip-nx-cache"
          ]
        }
      ]
    },
    "check-updates": {
      "name": "check-updates",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=check-updates --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "ci": {
      "name": "ci",
      "steps": [
        {
          "spawn": "install:ci"
        }
      ]
    },
    "clean-compile": {
      "name": "clean-compile",
      "description": "Clean up the compiled output",
      "steps": [
        {
          "exec": "rm -rf lib && rm -rf dist"
        }
      ]
    },
    "clean-modules": {
      "name": "clean-modules",
      "description": "Delete all node_modules folders",
      "steps": [
        {
          "exec": "find . -type d -name 'node_modules' -exec rm -r {} \\; || echo 'All done!'"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Compile all projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.json .projenrc.ts"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "spawn": "eslint:monorepo",
          "receiveArgs": true
        },
        {
          "exec": "pnpm exec nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ],
      "condition": "if [ \"$RELEASE\" = \"true\" ] ; then exit 1 ; fi"
    },
    "eslint:monorepo": {
      "name": "eslint:monorepo",
      "description": "Lint the monorepo",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern --max-warnings=0 .projenrc.* projenrc"
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "pnpm exec nx graph",
          "receiveArgs": true
        }
      ]
    },
    "i": {
      "name": "i",
      "steps": [
        {
          "spawn": "install"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "pnpm i --no-frozen-lockfile"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "pnpm i --frozen-lockfile"
        }
      ]
    },
    "lint": {
      "name": "lint",
      "description": "Alternate lint command",
      "steps": [
        {
          "spawn": "eslint"
        },
        {
          "exec": "pnpm exec nx run-many --target=lint --output-style=stream --nx-bail"
        }
      ],
      "condition": "if [ \"$RELEASE\" = \"true\" ] ; then exit 1 ; fi"
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-build": {
      "name": "post-build",
      "description": "Build gets locked, so this can be used to add tasks after everything is built, such as centralized docs that don't need building on release."
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=post-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "spawn": "eslint"
        },
        {
          "spawn": "type-check"
        },
        {
          "spawn": "test-unit"
        }
      ]
    },
    "test-unit": {
      "name": "test-unit",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        },
        {
          "exec": "pnpm exec nx run-many --target=test-unit --output-style=stream --nx-bail"
        }
      ],
      "condition": "if [ \"$RELEASE\" = \"true\" ] ; then exit 1 ; fi"
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "type-check": {
      "name": "type-check",
      "steps": [
        {
          "exec": "tsc --noEmit"
        },
        {
          "exec": "pnpm exec nx run-many --target=type-check --output-style=stream --nx-bail"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "spawn": "check-updates"
        },
        {
          "exec": "pnpm exec syncpack fix-mismatches"
        },
        {
          "exec": "pnpx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@aws/pdk,@cspell/eslint-plugin,@types/clone-deep,@types/jest,@types/lodash.merge,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,clone-deep,constructs,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-jest,eslint-plugin-prettier,eslint-plugin-sonarjs,eslint,jest,jest-junit,lodash.merge,npm-check-updates,nx-cloud,nx,prettier,projen,syncpack,ts-jest,ts-node,typescript,aws-cdk-lib,cdk-nag"
        },
        {
          "exec": "pnpm i --no-frozen-lockfile"
        },
        {
          "exec": "pnpm update @aws/pdk @cspell/eslint-plugin @types/clone-deep @types/jest @types/lodash.merge @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser clone-deep constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-jest eslint-plugin-prettier eslint-plugin-sonarjs eslint jest jest-junit lodash.merge npm-check-updates nx-cloud nx prettier projen syncpack ts-jest ts-node typescript aws-cdk-lib cdk-nag"
        },
        {
          "exec": "pnpm exec projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "pnpm exec nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    }
  },
  "env": {
    "PATH": "$(pnpm -c exec \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"pnpm exec projen\"."
}
