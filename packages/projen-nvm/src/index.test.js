"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const javascript_1 = require("projen/lib/javascript");
const _1 = require(".");
describe("Nvmrc", () => {
    it("Should create a .nvmrc file with the correct node version when specified", () => {
        const project = new javascript_1.NodeProject({
            name: "hello",
            defaultReleaseBranch: "main",
        });
        const NODE_VERSION = "20.10.0";
        const nvmrc = new _1.Nvmrc(project, {
            nodeVersion: NODE_VERSION,
        });
        expect(nvmrc.path).toEqual(".nvmrc");
        // @ts-expect-error - Violating access
        expect(nvmrc.lines).toContainEqual(NODE_VERSION);
    });
    it("Should create a .nvmrc file with the maxNodeVersion when no version is provided", () => {
        const NODE_VERSION = "20.10.0";
        const project = new javascript_1.NodeProject({
            name: "hello",
            defaultReleaseBranch: "main",
            maxNodeVersion: NODE_VERSION,
        });
        const nvmrc = new _1.Nvmrc(project);
        expect(nvmrc.path).toEqual(".nvmrc");
        // @ts-expect-error - Violating access
        expect(nvmrc.lines).toContainEqual(NODE_VERSION);
    });
    it("Should create a .nvmrc file with the minNodeVersion when no version is provided", () => {
        const NODE_VERSION = "20.10.0";
        const project = new javascript_1.NodeProject({
            name: "hello",
            defaultReleaseBranch: "main",
            minNodeVersion: NODE_VERSION,
        });
        const nvmrc = new _1.Nvmrc(project);
        expect(nvmrc.path).toEqual(".nvmrc");
        // @ts-expect-error - Violating access
        expect(nvmrc.lines).toContainEqual(NODE_VERSION);
    });
    it("Should create a .nvmrc file with the lts/* when no version is provided", () => {
        const project = new javascript_1.NodeProject({
            name: "hello",
            defaultReleaseBranch: "main",
        });
        const nvmrc = new _1.Nvmrc(project);
        expect(nvmrc.path).toEqual(".nvmrc");
        // @ts-expect-error - Violating access
        expect(nvmrc.lines).toContainEqual("lts/*");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFBb0Q7QUFDcEQsd0JBQTBCO0FBRTFCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO0lBQ25CLEVBQUUsQ0FBQywwRUFBMEUsRUFBRSxHQUFHLEVBQUU7UUFDaEYsTUFBTSxPQUFPLEdBQUcsSUFBSSx3QkFBVyxDQUFDO1lBQzVCLElBQUksRUFBRSxPQUFPO1lBQ2Isb0JBQW9CLEVBQUUsTUFBTTtTQUMvQixDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7UUFFL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFLLENBQUMsT0FBTyxFQUFFO1lBQzdCLFdBQVcsRUFBRSxZQUFZO1NBQzVCLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLHNDQUFzQztRQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpRkFBaUYsRUFBRSxHQUFHLEVBQUU7UUFDdkYsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO1FBRS9CLE1BQU0sT0FBTyxHQUFHLElBQUksd0JBQVcsQ0FBQztZQUM1QixJQUFJLEVBQUUsT0FBTztZQUNiLG9CQUFvQixFQUFFLE1BQU07WUFDNUIsY0FBYyxFQUFFLFlBQVk7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsc0NBQXNDO1FBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3JELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlGQUFpRixFQUFFLEdBQUcsRUFBRTtRQUN2RixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7UUFFL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSx3QkFBVyxDQUFDO1lBQzVCLElBQUksRUFBRSxPQUFPO1lBQ2Isb0JBQW9CLEVBQUUsTUFBTTtZQUM1QixjQUFjLEVBQUUsWUFBWTtTQUMvQixDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLFFBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyQyxzQ0FBc0M7UUFDdEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0VBQXdFLEVBQUUsR0FBRyxFQUFFO1FBQzlFLE1BQU0sT0FBTyxHQUFHLElBQUksd0JBQVcsQ0FBQztZQUM1QixJQUFJLEVBQUUsT0FBTztZQUNiLG9CQUFvQixFQUFFLE1BQU07U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckMsc0NBQXNDO1FBQ3RDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlUHJvamVjdCB9IGZyb20gXCJwcm9qZW4vbGliL2phdmFzY3JpcHRcIjtcbmltcG9ydCB7IE52bXJjIH0gZnJvbSBcIi5cIjtcblxuZGVzY3JpYmUoXCJOdm1yY1wiLCAoKSA9PiB7XG4gICAgaXQoXCJTaG91bGQgY3JlYXRlIGEgLm52bXJjIGZpbGUgd2l0aCB0aGUgY29ycmVjdCBub2RlIHZlcnNpb24gd2hlbiBzcGVjaWZpZWRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gbmV3IE5vZGVQcm9qZWN0KHtcbiAgICAgICAgICAgIG5hbWU6IFwiaGVsbG9cIixcbiAgICAgICAgICAgIGRlZmF1bHRSZWxlYXNlQnJhbmNoOiBcIm1haW5cIixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgTk9ERV9WRVJTSU9OID0gXCIyMC4xMC4wXCI7XG5cbiAgICAgICAgY29uc3QgbnZtcmMgPSBuZXcgTnZtcmMocHJvamVjdCwge1xuICAgICAgICAgICAgbm9kZVZlcnNpb246IE5PREVfVkVSU0lPTixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZXhwZWN0KG52bXJjLnBhdGgpLnRvRXF1YWwoXCIubnZtcmNcIik7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWaW9sYXRpbmcgYWNjZXNzXG4gICAgICAgIGV4cGVjdChudm1yYy5saW5lcykudG9Db250YWluRXF1YWwoTk9ERV9WRVJTSU9OKTtcbiAgICB9KTtcblxuICAgIGl0KFwiU2hvdWxkIGNyZWF0ZSBhIC5udm1yYyBmaWxlIHdpdGggdGhlIG1heE5vZGVWZXJzaW9uIHdoZW4gbm8gdmVyc2lvbiBpcyBwcm92aWRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IE5PREVfVkVSU0lPTiA9IFwiMjAuMTAuMFwiO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBuZXcgTm9kZVByb2plY3Qoe1xuICAgICAgICAgICAgbmFtZTogXCJoZWxsb1wiLFxuICAgICAgICAgICAgZGVmYXVsdFJlbGVhc2VCcmFuY2g6IFwibWFpblwiLFxuICAgICAgICAgICAgbWF4Tm9kZVZlcnNpb246IE5PREVfVkVSU0lPTixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbnZtcmMgPSBuZXcgTnZtcmMocHJvamVjdCk7XG5cbiAgICAgICAgZXhwZWN0KG52bXJjLnBhdGgpLnRvRXF1YWwoXCIubnZtcmNcIik7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWaW9sYXRpbmcgYWNjZXNzXG4gICAgICAgIGV4cGVjdChudm1yYy5saW5lcykudG9Db250YWluRXF1YWwoTk9ERV9WRVJTSU9OKTtcbiAgICB9KTtcblxuICAgIGl0KFwiU2hvdWxkIGNyZWF0ZSBhIC5udm1yYyBmaWxlIHdpdGggdGhlIG1pbk5vZGVWZXJzaW9uIHdoZW4gbm8gdmVyc2lvbiBpcyBwcm92aWRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IE5PREVfVkVSU0lPTiA9IFwiMjAuMTAuMFwiO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBuZXcgTm9kZVByb2plY3Qoe1xuICAgICAgICAgICAgbmFtZTogXCJoZWxsb1wiLFxuICAgICAgICAgICAgZGVmYXVsdFJlbGVhc2VCcmFuY2g6IFwibWFpblwiLFxuICAgICAgICAgICAgbWluTm9kZVZlcnNpb246IE5PREVfVkVSU0lPTixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbnZtcmMgPSBuZXcgTnZtcmMocHJvamVjdCk7XG5cbiAgICAgICAgZXhwZWN0KG52bXJjLnBhdGgpLnRvRXF1YWwoXCIubnZtcmNcIik7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWaW9sYXRpbmcgYWNjZXNzXG4gICAgICAgIGV4cGVjdChudm1yYy5saW5lcykudG9Db250YWluRXF1YWwoTk9ERV9WRVJTSU9OKTtcbiAgICB9KTtcblxuICAgIGl0KFwiU2hvdWxkIGNyZWF0ZSBhIC5udm1yYyBmaWxlIHdpdGggdGhlIGx0cy8qIHdoZW4gbm8gdmVyc2lvbiBpcyBwcm92aWRlZFwiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBuZXcgTm9kZVByb2plY3Qoe1xuICAgICAgICAgICAgbmFtZTogXCJoZWxsb1wiLFxuICAgICAgICAgICAgZGVmYXVsdFJlbGVhc2VCcmFuY2g6IFwibWFpblwiLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBudm1yYyA9IG5ldyBOdm1yYyhwcm9qZWN0KTtcblxuICAgICAgICBleHBlY3QobnZtcmMucGF0aCkudG9FcXVhbChcIi5udm1yY1wiKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFZpb2xhdGluZyBhY2Nlc3NcbiAgICAgICAgZXhwZWN0KG52bXJjLmxpbmVzKS50b0NvbnRhaW5FcXVhbChcImx0cy8qXCIpO1xuICAgIH0pO1xufSk7XG4iXX0=